local swap_i = 0
local swap_j = 0

local function draw(t)
	for i = 1, #t do
		local y = 5 - math.ceil(i/4)
		local x = i - (math.ceil(i/4) - 1) * 4
		
		tilemap.set_tile("#tilemap","layer1",x,y,t[i])
	end
end

local function swap(t, i, j)
	local tmp = t[i]
	t[i] = t[j]
	t[j] = tmp
	return t
end

local function scramble(t)
	local n = #t
	for i = 1, n - 1 do
		t = swap(t, i, math.random(i, n))
	end
	return t
end

local function inversions(t)
	local inv = 0
	for i = 1, #t do
		for j = i + 1, #t do 
			if t[i] > t[j] and t[j] ~= 0 then
				inv = inv + 1
			end
		end
	end
	return inv
end

local function find(t, tile)
	for i=1, #t do
		if t[i] == tile then
			local y = 5 - math.ceil(i/4) -- <1>
			local x = i - (math.ceil(i/4) - 1) * 4
			return x,y
		end
	end
end

local function solvable(t)
	local x,y = find(t, 0)
	if y % 2 == 1 and inversions(t) % 2 == 0 then
		return true
	end
	if y % 2 == 0 and inversions(t) % 2 == 1 then
		return true
	end
	return false
end

function init(self)
	msg.post(".", "acquire_input_focus")
	math.randomseed(socket.gettime())
	self.board = scramble({15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0})
	while not solvable(self.board) do
		self.board = scramble(self.board)
	end
	draw(self.board)
	self.done = false
	msg.post("#done", "disable")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("tile_moved") then
			self.board = swap(self.board, swap_i, swap_j)
			draw(self.board)
			msg.post("/animation#replicate_tile", "tile_is_set")
	end
end

function on_input(self, action_id, action)
	if action_id == hash("press") and action.pressed and not self.done then
		
		local x = math.ceil(action.x / 128)
		print(x)
		local y = math.ceil(action.y / 128)
		print(y)
		local ex, ey = find(self.board, 0)
		
		if math.abs(x - ex) + math.abs(y - ey) == 1 then
			
			local dir = vmath.vector3(ex-x,ey-y,0)
			
			tilemap.set_tile("/animation#replicate", "layer1", x, y, self.board[(4-y)*4+x])

			swap_i = (4-ey)*4+ex
			swap_j = (4-y)*4+x

			tilemap.set_tile("#tilemap", "layer1", x, y, 0)
			
			msg.post("/animation#replicate_tile", "move_tile", { dir = dir })
			
		end
		ex, ey = find(self.board, 0)
		if inversions(self.board) == 0 and ex == 4 then
			self.done = true
			msg.post("#done", "enable")
		end
	end
	-- if action_id == hash("solve") then
	-- 	tilemap.set_visible("#tilemap", "layer1", false)
	-- end
end
